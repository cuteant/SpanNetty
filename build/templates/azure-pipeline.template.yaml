parameters:
  name: ''
  displayName: ''
  vmImage: ''
  dependsOn: 'WindowsBuild'
  artifactName: 'nettyBuild'
  scriptFileName: ''
  scriptArgs: 'all'
  outputDirectory: ''
  timeoutInMinutes: 120
  packageFeed: ''

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - template: templates/install-dotnet.yaml
      - template: templates/install-nuget.yaml
      - template: templates/restore-nuget-packages.yaml
      - template: templates/install-build-dependencies.yaml
        parameters:
          packageFeed: ${{ parameters.packageFeed }}
      - task: Bash@3 
        displayName: Build (Linux)
        inputs:
          filePath: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
      # Windows
      - task: BatchScript@1
        displayName: Build (Windows)
        inputs:
          filename: ${{ parameters.scriptFileName }}
          arguments: ${{ parameters.scriptArgs }}
        continueOnError: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx' #TestResults folder usually
          testRunTitle: ${{ parameters.name }}
          mergeTestResults: true
      - task: CopyFiles@2
        displayName: 'Copy Build Output'
        inputs:
          sourceFolder: ${{ parameters.outputDirectory }}
          contents: '**\*'
          targetFolder: $(Build.ArtifactStagingDirectory)
          continueOnError: boolean  # 'true' if future steps should run even if this step fails; defaults to 'false'
      - script: 'echo 1>&2'
        failOnStderr: true
        displayName: 'If above is partially succeeded, then fail'
        condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')